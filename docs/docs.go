// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "jgoralcz",
            "url": "https://github.com/jgoralcz/cdbapi"
        },
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/characters": {
            "get": {
                "description": "Get character metadata by nsfw (boolean), game (boolean), western (boolean), limit (1-20), name (string). You must use name to get a result back.",
                "produces": [
                    "application/json"
                ],
                "summary": "Gets a character based off the user's query parameters.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name to search",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit 1-20; Default 1",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "whether the character is nsfw or not",
                        "name": "nsfw",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "whether the character is western (Cartoon) or not (Anime)",
                        "name": "western",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "whether the character is from a game or not",
                        "name": "game",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/characters.Character"
                            }
                        }
                    },
                    "400": {
                        "description": "Must have a valid name query parameter",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "An unexpected error has occurred when retrieving the character",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/characters/random": {
            "get": {
                "description": "Get character metadata by nsfw (boolean), game (boolean), western (boolean), limit (1-20).",
                "produces": [
                    "application/json"
                ],
                "summary": "Gets a character based off the user's query parameters.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "limit 1-20; Default 1",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "whether the character is nsfw or not",
                        "name": "nsfw",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "whether the character is western (Cartoon) or not (Anime)",
                        "name": "western",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "whether the character is from a game or not",
                        "name": "game",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/characters.Character"
                            }
                        }
                    },
                    "500": {
                        "description": "An unexpected error has occurred when retrieving the character",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        },
        "/characters/{id}": {
            "get": {
                "description": "get character metadata by id",
                "produces": [
                    "application/json"
                ],
                "summary": "Gets a character by the ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Some ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/characters.Character"
                        }
                    },
                    "400": {
                        "description": "Must have a valid id parameter",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Could not find a character with id Some ID",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    },
                    "500": {
                        "description": "An unexpected error has occurred when retrieving the character with id Some ID",
                        "schema": {
                            "$ref": "#/definitions/httputil.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "characters.AppearsIn": {
            "type": "object",
            "properties": {
                "game": {
                    "type": "boolean",
                    "format": "boolean",
                    "example": true
                },
                "nsfw": {
                    "type": "boolean",
                    "format": "boolean",
                    "example": false
                },
                "series": {
                    "type": "string",
                    "example": "Persona 4"
                },
                "series_id": {
                    "type": "integer",
                    "example": 2240
                },
                "western": {
                    "type": "boolean",
                    "format": "boolean",
                    "example": false
                }
            }
        },
        "characters.Character": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "string",
                    "format": "integer",
                    "example": "0"
                },
                "appears_in": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/characters.AppearsIn"
                    }
                },
                "blood_type": {
                    "type": "string",
                    "example": "null"
                },
                "bust_cm": {
                    "type": "string",
                    "format": "number",
                    "example": "0"
                },
                "date_of_birth": {
                    "type": "string",
                    "example": "null"
                },
                "description": {
                    "type": "string",
                    "example": "Marie is an assistant of the Velvet Room in Persona 4 Golden. When Marie is first met, she seems to be a very cold and antisocial individual. She is sullen, cranky, sarcastic, irritable, very foul-mouthed and often prone to mood swings. She will not hesitate to voice out her opinion or express her thoughts, regardless of how it would make everyone feel. Marie sometimes expresses her thoughts in poems which often deal with depressing themes like farewells and existentialism, questioning her own origin. Besides this, Marie is into fashion, loves nature (another major theme in her poems) and is apparently concerned about her figure, which is why she only eats healthy food."
                },
                "game": {
                    "type": "boolean",
                    "example": false
                },
                "height_cm": {
                    "type": "string",
                    "format": "number",
                    "example": "164"
                },
                "hip_cm": {
                    "type": "string",
                    "format": "number",
                    "example": "0"
                },
                "id": {
                    "type": "integer",
                    "example": 7960
                },
                "image_url": {
                    "type": "string",
                    "example": "https://cdn.bongo.best/characters/7960/82736d1f-fa95-4f6e-ae78-f9422f065202_thumb.png"
                },
                "image_url_clean": {
                    "type": "string",
                    "example": "https://cdn.bongo.best/characters/7960/82736d1f-fa95-4f6e-ae78-f9422f065202_thumb.png"
                },
                "name": {
                    "type": "string",
                    "example": "Marie"
                },
                "nsfw": {
                    "type": "boolean",
                    "example": false
                },
                "origin": {
                    "type": "string",
                    "example": "VelvetRoom"
                },
                "original_name": {
                    "type": "string",
                    "example": "null"
                },
                "series": {
                    "type": "string",
                    "example": "Persona 4"
                },
                "series_id": {
                    "type": "integer",
                    "example": 2240
                },
                "series_nsfw": {
                    "type": "boolean",
                    "example": false
                },
                "weight_kg": {
                    "type": "string",
                    "format": "number",
                    "example": "0"
                },
                "western": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "httputil.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Character Database (Go CDBAPI)",
	Description: "Character Database is a simple example of golang using Echo and interacting with a PostgreSQL database.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
